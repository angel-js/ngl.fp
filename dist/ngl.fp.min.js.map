{"version":3,"sources":["fp.js"],"names":["register","slice","isArray","Array","noop","identity","value","isDefined","iterateArray","iteratee","list","index","length","exit","iterateObject","iterate","extend","object","source","item","reduce","acc","map","filter","predicate","listIsArray","partial","fn","args","call","arguments","apply","concat","merge","objects","nglReduce","nglMap","nglFilter","nglPartial","nglMerge","nglCopy","nglNoop","nglIdentity","api","fp","angular","module","method","factory"],"mappings":"CAAA,SAAAA,GACA,YAEA,IAAAC,MAAAA,MACAC,EAAAC,MAAAD,QAEAE,EAAA,aACAC,EAAA,SAAAC,GAAA,MAAAA,IAEAC,EAAA,SAAAD,GACA,MAAA,mBAAAA,IAGAE,EAAA,SAAAC,EAAAC,GACA,IAAA,GAAAC,GAAA,EAAAC,EAAAF,EAAAE,OAAAA,EAAAD,EAAAA,IAAA,CACA,GAAAE,GAAAJ,EAAAC,EAAAC,GAAAA,EACA,IAAAJ,EAAAM,GAAA,MAAAA,KAIAC,EAAA,SAAAL,EAAAC,GACA,IAAA,GAAAC,KAAAD,GAAA,CACA,GAAAG,GAAAJ,EAAAC,EAAAC,GAAAA,EACA,IAAAJ,EAAAM,GAAA,MAAAA,KAIAE,EAAA,SAAAN,EAAAC,GACA,MAAAR,GAAAQ,GAAAF,EAAAC,EAAAC,GACAI,EAAAL,EAAAC,IAGAM,EAAA,SAAAC,EAAAC,GAKA,MAJAH,GAAA,SAAAI,EAAAR,GACAM,EAAAN,GAAAQ,GACAD,GAEAD,GAGAG,EAAA,SAAAX,EAAAY,EAAAX,GAKA,MAJAK,GAAA,SAAAI,EAAAR,GACAU,EAAAZ,EAAAY,EAAAF,EAAAR,IACAD,GAEAW,GAGAC,EAAA,SAAAb,EAAAC,GACA,MAAAU,GAAA,SAAAC,EAAAF,EAAAR,GAEA,MADAU,GAAAV,GAAAF,EAAAU,EAAAR,GACAU,GACAnB,EAAAQ,SAAAA,IAGAa,EAAA,SAAAC,EAAAd,GACA,GAAAe,GAAAvB,EAAAQ,EAEA,OAAAU,GAAA,SAAAC,EAAAF,EAAAR,GACA,MAAAa,GAAAL,EAAAR,IACAU,EAAAI,EAAAJ,EAAAT,OAAAD,GAAAQ,EACAE,GAFAA,GAGAI,QAAAf,IAGAgB,EAAA,SAAAC,GACA,GAAAC,GAAA3B,EAAA4B,KAAAC,UAAA,EAEA,OAAA,YACA,MAAAH,GAAAI,MAAA,KAAAH,EAAAI,OAAA/B,EAAA4B,KAAAC,eAIAG,EAAA,WACA,GAAAC,GAAAjC,EAAA4B,KAAAC,UACA,OAAAV,GAAAJ,KAAAkB,GAGAlC,IAGAmC,UAAAf,EACAgB,OAAAd,EACAe,UAAAd,EAGAe,WAAAZ,EAGAa,SAAAN,EACAO,QAAAP,EAGAQ,QAAArC,EACAsC,YAAArC,KAGA,SAAAsC,GACA,YAEA,IAAAC,GAAAC,QAAAC,OAAA,YAEA,KAAA,GAAAC,KAAAJ,GACAC,EAAAI,QAAAD,EAAA,WACA,MAAAJ,GAAAI","file":"ngl.fp.min.js","sourcesContent":["(function (register) {\n  'use strict';\n\n  var slice = [].slice;\n  var isArray = Array.isArray;\n\n  var noop = function () {};\n  var identity = function (value) { return value; };\n\n  var isDefined = function (value) {\n    return typeof value !== 'undefined';\n  };\n\n  var iterateArray = function (iteratee, list) {\n    for (var index = 0, length = list.length; index < length; index++) {\n      var exit = iteratee(list[index], index);\n      if (isDefined(exit)) { return exit; }\n    }\n  };\n\n  var iterateObject = function (iteratee, list) {\n    for (var index in list) {\n      var exit = iteratee(list[index], index);\n      if (isDefined(exit)) { return exit; }\n    }\n  };\n\n  var iterate = function (iteratee, list) {\n    if (isArray(list)) { return iterateArray(iteratee, list); }\n    return iterateObject(iteratee, list);\n  };\n\n  var extend = function (object, source) {\n    iterate(function (item, index) {\n      object[index] = item;\n    }, source);\n\n    return object;\n  };\n\n  var reduce = function (iteratee, acc, list) {\n    iterate(function (item, index) {\n      acc = iteratee(acc, item, index);\n    }, list);\n\n    return acc;\n  };\n\n  var map = function (iteratee, list) {\n    return reduce(function (acc, item, index) {\n      acc[index] = iteratee(item, index);\n      return acc;\n    }, isArray(list) ? [] : {}, list);\n  };\n\n  var filter = function (predicate, list) {\n    var listIsArray = isArray(list);\n\n    return reduce(function (acc, item, index) {\n      if (!predicate(item, index)) { return acc; }\n      acc[listIsArray ? acc.length : index] = item;\n      return acc;\n    }, listIsArray ? [] : {}, list);\n  };\n\n  var partial = function (fn /*, args... */) {\n    var args = slice.call(arguments, 1);\n\n    return function () {\n      return fn.apply(null, args.concat(slice.call(arguments)));\n    };\n  };\n\n  var merge = function (/* objects... */) {\n    var objects = slice.call(arguments);\n    return reduce(extend, {}, objects);\n  };\n\n  register({\n\n    // list\n    nglReduce: reduce,\n    nglMap: map,\n    nglFilter: filter,\n\n    // function\n    nglPartial: partial,\n\n    // lang\n    nglMerge: merge,\n    nglCopy: merge,\n\n    // util\n    nglNoop: noop,\n    nglIdentity: identity\n  });\n\n})(function register (api) {\n  'use strict';\n\n  var fp = angular.module('ngl.fp', []);\n\n  for (var method in api) {\n    fp.factory(method, function () {\n      return api[method];\n    });\n  }\n});\n"],"sourceRoot":"/source/"}